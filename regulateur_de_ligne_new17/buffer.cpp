#include "buffer.h"

#include <iostream>


/************************************************************************************************************************************************/
/*****************This function makes a queue of received frames, and se"nds them to frame_analysis one by one analyzes them one by one and sends to related threads**************************/
/************************************************************************************************************************************************/


void buffer::buffering(){
    while(1){

        /*>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/
        /* locks the thread and waits till sign becomes true in listener thread. it means that all data is received and saved in myvector: */
        {
            std::cout<<"here buffer begins; sign: "<<sign<<std::endl;
            std::unique_lock<std::mutex> lk(m);
            while(!sign) cv.wait(lk);
            /*--------------------------debug-----------------------------------------------------------------------------------------------------------------------------------------------------*/
            std::cout<<"here buffer waits for change in sign; sign: "<<sign<<std::endl;
            /*--------------------------debug-----------------------------------------------------------------------------------------------------------------------------------------------------*/

        /* pushes the data in the buffer: */
        mybuffer.push_back(myvector);

        /*--------------------------debug-----------------------------------------------------------------------------------------------------------------------------------------------------*/
        std::cout<<"now we show mybuffer: \n";
        /*--------------------------debug-----------------------------------------------------------------------------------------------------------------------------------------------------*/

        /*--------------------------debug-----------------------------------------------------------------------------------------------------------------------------------------------------*/
        /* print all the data received: */

        for ( int i = 0; i<mybuffer.size(); i++)
        {
           for ( int j = 0; j<mybuffer[i].size(); j++ )
               std::cout << mybuffer[i][j] << ' ';
           std::cout << std::endl;
        }

        /*--------------------------debug-----------------------------------------------------------------------------------------------------------------------------------------------------*/

        sign = 0;
        }
        /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/

        /* notify listener to unlock and wait for another input */
        cv.notify_all();

        /*>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/
        /* lock and notify frame_analysis to start analysis of new inputs: */
        {
            std::lock_guard <std::mutex> lk(m);
            /* increments count to signal frame_analysis thread: */
            count+=1;
            std::cout<<"count incremented; count = " << count<< std::endl;
        }
        cv.notify_all();
        /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/

    }
}
